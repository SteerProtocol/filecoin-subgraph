// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ActionExecuted extends ethereum.Event {
  get params(): ActionExecuted__Params {
    return new ActionExecuted__Params(this);
  }
}

export class ActionExecuted__Params {
  _event: ActionExecuted;

  constructor(event: ActionExecuted) {
    this._event = event;
  }

  get actionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewardPerAction(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ActionFailed extends ethereum.Event {
  get params(): ActionFailed__Params {
    return new ActionFailed__Params(this);
  }
}

export class ActionFailed__Params {
  _event: ActionFailed;

  constructor(event: ActionFailed) {
    this._event = event;
  }

  get actionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Vote extends ethereum.Event {
  get params(): Vote__Params {
    return new Vote__Params(this);
  }
}

export class Vote__Params {
  _event: Vote;

  constructor(event: Vote) {
    this._event = event;
  }

  get actionHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Orchestrator extends ethereum.SmartContract {
  static bind(address: Address): Orchestrator {
    return new Orchestrator("Orchestrator", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  actionApprovalStatus(actionHash: Bytes): boolean {
    let result = super.call(
      "actionApprovalStatus",
      "actionApprovalStatus(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(actionHash)]
    );

    return result[0].toBoolean();
  }

  try_actionApprovalStatus(actionHash: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "actionApprovalStatus",
      "actionApprovalStatus(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(actionHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  actionThresholdPercent(): BigInt {
    let result = super.call(
      "actionThresholdPercent",
      "actionThresholdPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_actionThresholdPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "actionThresholdPercent",
      "actionThresholdPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  actions(param0: Bytes): i32 {
    let result = super.call("actions", "actions(bytes32):(uint8)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toI32();
  }

  try_actions(param0: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall("actions", "actions(bytes32):(uint8)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  executeAction(
    targetAddress: Address,
    jobEpoch: BigInt,
    calldatas: Array<Bytes>,
    timeIndependentLengths: Array<BigInt>,
    jobHash: Bytes
  ): i32 {
    let result = super.call(
      "executeAction",
      "executeAction(address,uint256,bytes[],uint256[],bytes32):(uint8)",
      [
        ethereum.Value.fromAddress(targetAddress),
        ethereum.Value.fromUnsignedBigInt(jobEpoch),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromUnsignedBigIntArray(timeIndependentLengths),
        ethereum.Value.fromFixedBytes(jobHash)
      ]
    );

    return result[0].toI32();
  }

  try_executeAction(
    targetAddress: Address,
    jobEpoch: BigInt,
    calldatas: Array<Bytes>,
    timeIndependentLengths: Array<BigInt>,
    jobHash: Bytes
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "executeAction",
      "executeAction(address,uint256,bytes[],uint256[],bytes32):(uint8)",
      [
        ethereum.Value.fromAddress(targetAddress),
        ethereum.Value.fromUnsignedBigInt(jobEpoch),
        ethereum.Value.fromBytesArray(calldatas),
        ethereum.Value.fromUnsignedBigIntArray(timeIndependentLengths),
        ethereum.Value.fromFixedBytes(jobHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  gasVault(): Address {
    let result = super.call("gasVault", "gasVault():(address)", []);

    return result[0].toAddress();
  }

  try_gasVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("gasVault", "gasVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  keeperRegistry(): Address {
    let result = super.call("keeperRegistry", "keeperRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_keeperRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "keeperRegistry",
      "keeperRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardPerAction(): BigInt {
    let result = super.call(
      "rewardPerAction",
      "rewardPerAction():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerAction(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerAction",
      "rewardPerAction():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  voteBitmaps(param0: Bytes): BigInt {
    let result = super.call("voteBitmaps", "voteBitmaps(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_voteBitmaps(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "voteBitmaps",
      "voteBitmaps(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AdminCall extends ethereum.Call {
  get inputs(): AdminCall__Inputs {
    return new AdminCall__Inputs(this);
  }

  get outputs(): AdminCall__Outputs {
    return new AdminCall__Outputs(this);
  }
}

export class AdminCall__Inputs {
  _call: AdminCall;

  constructor(call: AdminCall) {
    this._call = call;
  }
}

export class AdminCall__Outputs {
  _call: AdminCall;

  constructor(call: AdminCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall extends ethereum.Call {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}

export class ImplementationCall extends ethereum.Call {
  get inputs(): ImplementationCall__Inputs {
    return new ImplementationCall__Inputs(this);
  }

  get outputs(): ImplementationCall__Outputs {
    return new ImplementationCall__Outputs(this);
  }
}

export class ImplementationCall__Inputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }
}

export class ImplementationCall__Outputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class _executeActionCall extends ethereum.Call {
  get inputs(): _executeActionCall__Inputs {
    return new _executeActionCall__Inputs(this);
  }

  get outputs(): _executeActionCall__Outputs {
    return new _executeActionCall__Outputs(this);
  }
}

export class _executeActionCall__Inputs {
  _call: _executeActionCall;

  constructor(call: _executeActionCall) {
    this._call = call;
  }

  get targetAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class _executeActionCall__Outputs {
  _call: _executeActionCall;

  constructor(call: _executeActionCall) {
    this._call = call;
  }
}

export class ExecuteActionCall extends ethereum.Call {
  get inputs(): ExecuteActionCall__Inputs {
    return new ExecuteActionCall__Inputs(this);
  }

  get outputs(): ExecuteActionCall__Outputs {
    return new ExecuteActionCall__Outputs(this);
  }
}

export class ExecuteActionCall__Inputs {
  _call: ExecuteActionCall;

  constructor(call: ExecuteActionCall) {
    this._call = call;
  }

  get targetAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get jobEpoch(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get timeIndependentLengths(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get jobHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ExecuteActionCall__Outputs {
  _call: ExecuteActionCall;

  constructor(call: ExecuteActionCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _keeperRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardPerAction(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetGasVaultCall extends ethereum.Call {
  get inputs(): SetGasVaultCall__Inputs {
    return new SetGasVaultCall__Inputs(this);
  }

  get outputs(): SetGasVaultCall__Outputs {
    return new SetGasVaultCall__Outputs(this);
  }
}

export class SetGasVaultCall__Inputs {
  _call: SetGasVaultCall;

  constructor(call: SetGasVaultCall) {
    this._call = call;
  }

  get _gasVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGasVaultCall__Outputs {
  _call: SetGasVaultCall;

  constructor(call: SetGasVaultCall) {
    this._call = call;
  }
}

export class SetRewardPerActionCall extends ethereum.Call {
  get inputs(): SetRewardPerActionCall__Inputs {
    return new SetRewardPerActionCall__Inputs(this);
  }

  get outputs(): SetRewardPerActionCall__Outputs {
    return new SetRewardPerActionCall__Outputs(this);
  }
}

export class SetRewardPerActionCall__Inputs {
  _call: SetRewardPerActionCall;

  constructor(call: SetRewardPerActionCall) {
    this._call = call;
  }

  get _rewardPerAction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardPerActionCall__Outputs {
  _call: SetRewardPerActionCall;

  constructor(call: SetRewardPerActionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VoteOnActionCall extends ethereum.Call {
  get inputs(): VoteOnActionCall__Inputs {
    return new VoteOnActionCall__Inputs(this);
  }

  get outputs(): VoteOnActionCall__Outputs {
    return new VoteOnActionCall__Outputs(this);
  }
}

export class VoteOnActionCall__Inputs {
  _call: VoteOnActionCall;

  constructor(call: VoteOnActionCall) {
    this._call = call;
  }

  get actionHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get vote(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class VoteOnActionCall__Outputs {
  _call: VoteOnActionCall;

  constructor(call: VoteOnActionCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialAdmin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
